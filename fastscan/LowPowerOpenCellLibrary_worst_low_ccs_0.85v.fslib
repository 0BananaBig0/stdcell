//
// ***********************************************************************
// Copyright Mentor Graphics Corporation
// All Rights Reserved
// For use only with Mentor Graphics Tessent tools
// ***********************************************************************
// File Type:       Tessent Cell Library 
// Generated by:    Tessent Shell -- write_cell_library 
// Tool Version:    2019.4 
// Tool Build Date:   Wed Nov 20 21:14:16 GMT 2019 
// ***********************************************************************
// Library Created : Local Time = Tue Jun 30 00:33:33 2020
//                          GMT = Tue Jun 30 07:33:33 2020


library_format_version = 9;

array_delimiter = "[]";


//
// ***********************************************************************
// ***********   Models holding Liberty information     ******************
// ***********************************************************************
//


model AON_BUF_X1
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model AON_BUF_X1


model AON_BUF_X2
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model AON_BUF_X2


model AON_BUF_X4
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model AON_BUF_X4


model AON_INV_X1
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _inv (A, Z);
  )
) // end model AON_INV_X1


model AON_INV_X2
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _inv (A, Z);
  )
) // end model AON_INV_X2


model AON_INV_X4
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _inv (A, Z);
  )
) // end model AON_INV_X4


model HEADER_OE_X1
  (SLEEP, SLEEPOUT)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (SLEEP) ( )
  output (SLEEPOUT) ( )
  (
    primitive = _buf (SLEEP, SLEEPOUT);
  )
) // end model HEADER_OE_X1


model HEADER_OE_X2
  (SLEEP, SLEEPOUT)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (SLEEP) ( )
  output (SLEEPOUT) ( )
  (
    primitive = _buf (SLEEP, SLEEPOUT);
  )
) // end model HEADER_OE_X2


model HEADER_OE_X4
  (SLEEP, SLEEPOUT)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (SLEEP) ( )
  output (SLEEPOUT) ( )
  (
    primitive = _buf (SLEEP, SLEEPOUT);
  )
) // end model HEADER_OE_X4


model HEADER_X1
  (SLEEP)
(
  model_source = liberty_cell;
  cell_type = prohibited;

  input (SLEEP) ( )
  (
  // Empty Model
  )
) // end model HEADER_X1


model HEADER_X2
  (SLEEP)
(
  model_source = liberty_cell;
  cell_type = prohibited;

  input (SLEEP) ( )
  (
  // Empty Model
  )
) // end model HEADER_X2


model HEADER_X4
  (SLEEP)
(
  model_source = liberty_cell;
  cell_type = prohibited;

  input (SLEEP) ( )
  (
  // Empty Model
  )
) // end model HEADER_X4


model ISO_FENCE0N_X1
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = and;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _and (A, EN, Z);
  )
) // end model ISO_FENCE0N_X1


model ISO_FENCE0N_X2
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = and;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _and (A, EN, Z);
  )
) // end model ISO_FENCE0N_X2


model ISO_FENCE0N_X4
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = and;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _and (A, EN, Z);
  )
) // end model ISO_FENCE0N_X4


model ISO_FENCE0_X1
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nor;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _or (A, EN, net_0);
  )
) // end model ISO_FENCE0_X1


model ISO_FENCE0_X2
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nor;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _or (A, EN, net_0);
  )
) // end model ISO_FENCE0_X2


model ISO_FENCE0_X4
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nor;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _or (A, EN, net_0);
  )
) // end model ISO_FENCE0_X4


model ISO_FENCE1N_X1
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nand;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _and (A, EN, net_0);
  )
) // end model ISO_FENCE1N_X1


model ISO_FENCE1N_X2
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nand;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _and (A, EN, net_0);
  )
) // end model ISO_FENCE1N_X2


model ISO_FENCE1N_X4
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = nand;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _inv (net_0, Z);
    primitive = _and (A, EN, net_0);
  )
) // end model ISO_FENCE1N_X4


model ISO_FENCE1_X1
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = or;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _or (A, EN, Z);
  )
) // end model ISO_FENCE1_X1


model ISO_FENCE1_X2
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = or;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _or (A, EN, Z);
  )
) // end model ISO_FENCE1_X2


model ISO_FENCE1_X4
  (A, EN, Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = or;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _or (A, EN, Z);
  )
) // end model ISO_FENCE1_X4


model LS_HLEN_X1
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_HLEN_X1


model LS_HLEN_X2
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_HLEN_X2


model LS_HLEN_X4
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_HLEN_X4


model LS_HL_X1
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_HL_X1


model LS_HL_X2
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_HL_X2


model LS_HL_X4
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_HL_X4


model LS_LHEN_X1
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_LHEN_X1


model LS_LHEN_X2
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_LHEN_X2


model LS_LHEN_X4
  (A, ISOLN, Z)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A) ( )
  input (ISOLN) ( )
  output (Z) ( )
  (
    primitive = _and (A, ISOLN, Z);
  )
) // end model LS_LHEN_X4


model LS_LH_X1
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_LH_X1


model LS_LH_X2
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_LH_X2


model LS_LH_X4
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model LS_LH_X4
