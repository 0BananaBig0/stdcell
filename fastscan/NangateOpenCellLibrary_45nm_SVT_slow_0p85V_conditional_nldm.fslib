//
// ***********************************************************************
// Copyright Mentor Graphics Corporation
// All Rights Reserved
// For use only with Mentor Graphics Tessent tools
// ***********************************************************************
// File Type:       Tessent Cell Library 
// Generated by:    Tessent Shell -- write_cell_library 
// Tool Version:    2019.4 
// Tool Build Date:   Wed Nov 20 21:14:16 GMT 2019 
// ***********************************************************************
// Library Created : Local Time = Tue Jun 30 00:33:28 2020
//                          GMT = Tue Jun 30 07:33:28 2020


library_format_version = 9;

array_delimiter = "[]";


//
// ***********************************************************************
// ***********   Models holding Liberty information     ******************
// ***********************************************************************
//


model AND2_X1_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _and (A1, A2, ZN);
  )
) // end model AND2_X1_SVT


model AND2_X2_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _and (A1, A2, ZN);
  )
) // end model AND2_X2_SVT


model AND2_X4_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _and (A1, A2, ZN);
  )
) // end model AND2_X4_SVT


model AND3_X1_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A3, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model AND3_X1_SVT


model AND3_X2_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A3, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model AND3_X2_SVT


model AND3_X4_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A3, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model AND3_X4_SVT


model AND4_X1_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A4, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model AND4_X1_SVT


model AND4_X2_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A4, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model AND4_X2_SVT


model AND4_X4_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = and;
  simulation_function = and;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _and (net_0, A4, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model AND4_X4_SVT


model ANTENNA_X1_SVT
  (A)
(
  model_source = liberty_cell;
  cell_type = prohibited;

  input (A) ( )
  (
  // Empty Model
  )
) // end model ANTENNA_X1_SVT


model AOI211_X1_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A, net_0);
    primitive = _or (net_2, B, net_1);
    primitive = _and (C1, C2, net_2);
  )
) // end model AOI211_X1_SVT


model AOI211_X2_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A, net_0);
    primitive = _or (net_2, B, net_1);
    primitive = _and (C1, C2, net_2);
  )
) // end model AOI211_X2_SVT


model AOI211_X4_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _inv (net_1, net_0);
    primitive = _inv (net_2, net_1);
    primitive = _or (net_3, A, net_2);
    primitive = _or (net_4, B, net_3);
    primitive = _and (C1, C2, net_4);
  )
) // end model AOI211_X4_SVT


model AOI21_X1_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A, net_1, net_0);
    primitive = _and (B1, B2, net_1);
  )
) // end model AOI21_X1_SVT


model AOI21_X2_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A, net_1, net_0);
    primitive = _and (B1, B2, net_1);
  )
) // end model AOI21_X2_SVT


model AOI21_X4_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A, net_1, net_0);
    primitive = _and (B1, B2, net_1);
  )
) // end model AOI21_X4_SVT


model AOI221_X1_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_3, net_0);
    primitive = _or (net_2, A, net_1);
    primitive = _and (C1, C2, net_2);
    primitive = _and (B1, B2, net_3);
  )
) // end model AOI221_X1_SVT


model AOI221_X2_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_3, net_0);
    primitive = _or (net_2, A, net_1);
    primitive = _and (C1, C2, net_2);
    primitive = _and (B1, B2, net_3);
  )
) // end model AOI221_X2_SVT


model AOI221_X4_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _inv (net_1, net_0);
    primitive = _inv (net_2, net_1);
    primitive = _or (net_3, net_5, net_2);
    primitive = _or (net_4, A, net_3);
    primitive = _and (C1, C2, net_4);
    primitive = _and (B1, B2, net_5);
  )
) // end model AOI221_X4_SVT


model AOI222_X1_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_4, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (A1, A2, net_2);
    primitive = _and (B1, B2, net_3);
    primitive = _and (C1, C2, net_4);
  )
) // end model AOI222_X1_SVT


model AOI222_X2_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_4, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (A1, A2, net_2);
    primitive = _and (B1, B2, net_3);
    primitive = _and (C1, C2, net_4);
  )
) // end model AOI222_X2_SVT


model AOI222_X4_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _inv (net_1, net_0);
    primitive = _inv (net_2, net_1);
    primitive = _or (net_3, net_6, net_2);
    primitive = _or (net_4, net_5, net_3);
    primitive = _and (A1, A2, net_4);
    primitive = _and (B1, B2, net_5);
    primitive = _and (C1, C2, net_6);
  )
) // end model AOI222_X4_SVT


model AOI22_X1_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_2, net_0);
    primitive = _and (A1, A2, net_1);
    primitive = _and (B1, B2, net_2);
  )
) // end model AOI22_X1_SVT


model AOI22_X2_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_2, net_0);
    primitive = _and (A1, A2, net_1);
    primitive = _and (B1, B2, net_2);
  )
) // end model AOI22_X2_SVT


model AOI22_X4_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, net_2, net_0);
    primitive = _and (A1, A2, net_1);
    primitive = _and (B1, B2, net_2);
  )
) // end model AOI22_X4_SVT


model BUF_X16_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X16_SVT


model BUF_X1_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X1_SVT


model BUF_X2_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X2_SVT


model BUF_X32_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X32_SVT


model BUF_X4_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X4_SVT


model BUF_X8_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model BUF_X8_SVT


model CLKBUF_X1_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model CLKBUF_X1_SVT


model CLKBUF_X2_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model CLKBUF_X2_SVT


model CLKBUF_X3_SVT
  (A, Z)
(
  model_source = liberty_cell;
  cell_type = buffer;
  simulation_function = buffer;

  input (A) ( )
  output (Z) ( )
  (
    primitive = _buf (A, Z);
  )
) // end model CLKBUF_X3_SVT


model "CLKGATETST_X1_SVT_$_IQ"
  (CK, E, SE, IQ)
(
  model_source = liberty_cell_statetable;

  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (IQ) ( )
  (
    primitive = _dlat (  ,  , clock_net, net_0, IQ,  );
    primitive = _inv (CK, clock_net);
    primitive = _or (E, SE, net_0);
  )
) // end model CLKGATETST_X1_SVT_$_IQ


model CLKGATETST_X1_SVT
  (CK, E, GCK, SE)
(
  model_source = liberty_cell;
  cell_type = clock_gating_and;
  simulation_function = clock_gating_and;

  input (CK) ( clock_in; )
  input (E) ( func_enable; )
  input (SE) ( test_enable; )
  output (GCK) ( clock_out; )
  (
    instance = "CLKGATETST_X1_SVT_$_IQ" (CK, E, SE, IQ);
    primitive = _and (IQ, CK, GCK);
  )
) // end model CLKGATETST_X1_SVT


model "CLKGATETST_X2_SVT_$_IQ"
  (CK, E, SE, IQ)
(
  model_source = liberty_cell_statetable;

  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (IQ) ( )
  (
    primitive = _dlat (  ,  , clock_net, net_0, IQ,  );
    primitive = _inv (CK, clock_net);
    primitive = _or (E, SE, net_0);
  )
) // end model CLKGATETST_X2_SVT_$_IQ


model CLKGATETST_X2_SVT
  (CK, E, GCK, SE)
(
  model_source = liberty_cell;
  cell_type = clock_gating_and;
  simulation_function = clock_gating_and;

  input (CK) ( clock_in; )
  input (E) ( func_enable; )
  input (SE) ( test_enable; )
  output (GCK) ( clock_out; )
  (
    instance = "CLKGATETST_X2_SVT_$_IQ" (CK, E, SE, IQ);
    primitive = _and (IQ, CK, GCK);
  )
) // end model CLKGATETST_X2_SVT


model "CLKGATETST_X4_SVT_$_IQ"
  (CK, E, SE, IQ)
(
  model_source = liberty_cell_statetable;

  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (IQ) ( )
  (
    primitive = _dlat (  ,  , clock_net, net_0, IQ,  );
    primitive = _inv (CK, clock_net);
    primitive = _or (E, SE, net_0);
  )
) // end model CLKGATETST_X4_SVT_$_IQ


model CLKGATETST_X4_SVT
  (CK, E, GCK, SE)
(
  model_source = liberty_cell;
  cell_type = clock_gating_and;
  simulation_function = clock_gating_and;

  input (CK) ( clock_in; )
  input (E) ( func_enable; )
  input (SE) ( test_enable; )
  output (GCK) ( clock_out; )
  (
    instance = "CLKGATETST_X4_SVT_$_IQ" (CK, E, SE, IQ);
    primitive = _and (IQ, CK, GCK);
  )
) // end model CLKGATETST_X4_SVT


model "CLKGATETST_X8_SVT_$_IQ"
  (CK, E, SE, IQ)
(
  model_source = liberty_cell_statetable;

  input (CK) ( )
  input (E) ( )
  input (SE) ( )
  output (IQ) ( )
  (
    primitive = _dlat (  ,  , clock_net, net_0, IQ,  );
    primitive = _inv (CK, clock_net);
    primitive = _or (E, SE, net_0);
  )
) // end model CLKGATETST_X8_SVT_$_IQ


model CLKGATETST_X8_SVT
  (CK, E, GCK, SE)
(
  model_source = liberty_cell;
  cell_type = clock_gating_and;
  simulation_function = clock_gating_and;

  input (CK) ( clock_in; )
  input (E) ( func_enable; )
  input (SE) ( test_enable; )
  output (GCK) ( clock_out; )
  (
    instance = "CLKGATETST_X8_SVT_$_IQ" (CK, E, SE, IQ);
    primitive = _and (IQ, CK, GCK);
  )
) // end model CLKGATETST_X8_SVT


model "CLKGATE_X1_SVT_$_IQ"
  (CK, E, IQ)
(
  model_source = liberty_cell_statetable;
  simulation_function = latch;

  input (CK) ( active_low_clock; )
  input (E) ( data_in; )
  output (IQ) ( data_out; )
  (
    primitive = _dlat (  ,  , clock_net, E, IQ,  );
    primitive = _inv (CK, clock_net);
  )
) // end model CLKGATE_X1_SVT_$_IQ


model CLKGATE_X1_SVT
  (CK, E, GCK)
(
  model_source = liberty_cell;

  input (CK) ( active_low_clock; )
  input (E) ( )
  output (GCK) ( )
  (
    instance = "CLKGATE_X1_SVT_$_IQ" (CK, E, IQ);
    primitive = _and (CK, IQ, GCK);
  )
) // end model CLKGATE_X1_SVT


model "CLKGATE_X2_SVT_$_IQ"
  (CK, E, IQ)
(
  model_source = liberty_cell_statetable;
  simulation_function = latch;

  input (CK) ( active_low_clock; )
  input (E) ( data_in; )
  output (IQ) ( data_out; )
  (
    primitive = _dlat (  ,  , clock_net, E, IQ,  );
    primitive = _inv (CK, clock_net);
  )
) // end model CLKGATE_X2_SVT_$_IQ


model CLKGATE_X2_SVT
  (CK, E, GCK)
(
  model_source = liberty_cell;

  input (CK) ( active_low_clock; )
  input (E) ( )
  output (GCK) ( )
  (
    instance = "CLKGATE_X2_SVT_$_IQ" (CK, E, IQ);
    primitive = _and (CK, IQ, GCK);
  )
) // end model CLKGATE_X2_SVT


model "CLKGATE_X4_SVT_$_IQ"
  (CK, E, IQ)
(
  model_source = liberty_cell_statetable;
  simulation_function = latch;

  input (CK) ( active_low_clock; )
  input (E) ( data_in; )
  output (IQ) ( data_out; )
  (
    primitive = _dlat (  ,  , clock_net, E, IQ,  );
    primitive = _inv (CK, clock_net);
  )
) // end model CLKGATE_X4_SVT_$_IQ


model CLKGATE_X4_SVT
  (CK, E, GCK)
(
  model_source = liberty_cell;

  input (CK) ( active_low_clock; )
  input (E) ( )
  output (GCK) ( )
  (
    instance = "CLKGATE_X4_SVT_$_IQ" (CK, E, IQ);
    primitive = _and (CK, IQ, GCK);
  )
) // end model CLKGATE_X4_SVT


model "CLKGATE_X8_SVT_$_IQ"
  (CK, E, IQ)
(
  model_source = liberty_cell_statetable;
  simulation_function = latch;

  input (CK) ( active_low_clock; )
  input (E) ( data_in; )
  output (IQ) ( data_out; )
  (
    primitive = _dlat (  ,  , clock_net, E, IQ,  );
    primitive = _inv (CK, clock_net);
  )
) // end model CLKGATE_X8_SVT_$_IQ


model CLKGATE_X8_SVT
  (CK, E, GCK)
(
  model_source = liberty_cell;

  input (CK) ( active_low_clock; )
  input (E) ( )
  output (GCK) ( )
  (
    instance = "CLKGATE_X8_SVT_$_IQ" (CK, E, IQ);
    primitive = _and (CK, IQ, GCK);
  )
) // end model CLKGATE_X8_SVT


model DFFRS_X1_SVT
  (CK, D, Q, QN,
   RN, SN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFRS_X1_SVT, SDFFRS_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SN) ( active_low_set; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (net_0, net_1, CK, D, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _inv (RN, net_1);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFRS_X1_SVT


model DFFRS_X2_SVT
  (CK, D, Q, QN,
   RN, SN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFRS_X2_SVT, SDFFRS_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SN) ( active_low_set; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (net_0, net_1, CK, D, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _inv (RN, net_1);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFRS_X2_SVT


model DFFR_X1_SVT
  (CK, D, Q, QN,
   RN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFR_X1_SVT, SDFFR_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (  , net_0, CK, D, IQ, IQN);
    primitive = _inv (RN, net_0);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFR_X1_SVT


model DFFR_X2_SVT
  (CK, D, Q, QN,
   RN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFR_X2_SVT, SDFFR_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (  , net_0, CK, D, IQ, IQN);
    primitive = _inv (RN, net_0);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFR_X2_SVT


model DFFS_X1_SVT
  (CK, D, Q, QN,
   SN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFS_X2_SVT, SDFFS_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SN) ( active_low_set; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (net_0,  , CK, D, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFS_X1_SVT


model DFFS_X2_SVT
  (CK, D, Q, QN,
   SN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFFS_X2_SVT, SDFFS_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SN) ( active_low_set; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (net_0,  , CK, D, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFFS_X2_SVT


model DFF_X1_SVT
  (CK, D, Q, QN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFF_X1_SVT, SDFF_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (  ,  , CK, D, IQ, IQN);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFF_X1_SVT


model DFF_X2_SVT
  (CK, D, Q, QN)
(
  model_source = liberty_cell;
  cell_type = dff;
  simulation_function = dff;
  scan_equivalents = SDFF_X2_SVT, SDFF_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  output (Q) ( data_out; )
  output (QN) ( data_out_inv; )
  (
    primitive = _dff (  ,  , CK, D, IQ, IQN);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model DFF_X2_SVT


model DLH_X1_SVT
  (D, G, Q)
(
  model_source = liberty_cell;
  cell_type = latch;
  simulation_function = latch;

  input (D) ( data_in; )
  input (G) ( active_high_clock; )
  output (Q) ( data_out; )
  (
    primitive = _dlat (  ,  , G, D, IQ,  );
    primitive = _buf (IQ, Q);
  )
) // end model DLH_X1_SVT


model DLH_X2_SVT
  (D, G, Q)
(
  model_source = liberty_cell;
  cell_type = latch;
  simulation_function = latch;

  input (D) ( data_in; )
  input (G) ( active_high_clock; )
  output (Q) ( data_out; )
  (
    primitive = _dlat (  ,  , G, D, IQ,  );
    primitive = _buf (IQ, Q);
  )
) // end model DLH_X2_SVT


model DLL_X1_SVT
  (D, GN, Q)
(
  model_source = liberty_cell;
  cell_type = latch;
  simulation_function = latch;

  input (D) ( data_in; )
  input (GN) ( active_low_clock; )
  output (Q) ( data_out; )
  (
    primitive = _dlat (  ,  , net_0, D, IQ,  );
    primitive = _inv (GN, net_0);
    primitive = _buf (IQ, Q);
  )
) // end model DLL_X1_SVT


model DLL_X2_SVT
  (D, GN, Q)
(
  model_source = liberty_cell;
  cell_type = latch;
  simulation_function = latch;

  input (D) ( data_in; )
  input (GN) ( active_low_clock; )
  output (Q) ( data_out; )
  (
    primitive = _dlat (  ,  , net_0, D, IQ,  );
    primitive = _inv (GN, net_0);
    primitive = _buf (IQ, Q);
  )
) // end model DLL_X2_SVT


model FA_X1_SVT
  (A, B, CI, CO,
   S)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (CI) ( )
  output (CO) ( )
  output (S) ( )
  (
    primitive = _or (net_0, net_1, CO);
    primitive = _and (A, B, net_0);
    primitive = _and (CI, net_2, net_1);
    primitive = _or (A, B, net_2);
    primitive = _xor (CI, net_3, S);
    primitive = _xor (A, B, net_3);
  )
) // end model FA_X1_SVT


model FILLCELL_X16_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X16_SVT


model FILLCELL_X1_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X1_SVT


model FILLCELL_X2_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X2_SVT


model FILLCELL_X32_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X32_SVT


model FILLCELL_X4_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X4_SVT


model FILLCELL_X8_SVT
  ( )
(
  model_source = liberty_cell;
  cell_type = prohibited;

) // end model FILLCELL_X8_SVT


model HA_X1_SVT
  (A, B, CO, S)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  output (CO) ( )
  output (S) ( )
  (
    primitive = _and (A, B, CO);
    primitive = _xor (A, B, S);
  )
) // end model HA_X1_SVT


model INV_X16_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X16_SVT


model INV_X1_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X1_SVT


model INV_X2_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X2_SVT


model INV_X32_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X32_SVT


model INV_X4_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X4_SVT


model INV_X8_SVT
  (A, ZN)
(
  model_source = liberty_cell;
  cell_type = inverter;
  simulation_function = inverter;

  input (A) ( )
  output (ZN) ( )
  (
    primitive = _inv (A, ZN);
  )
) // end model INV_X8_SVT


model LOGIC0_X1_SVT
  (Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = tie0;

  output (Z) ( )
  (
    primitive = _tie0 (Z);
  )
) // end model LOGIC0_X1_SVT


model LOGIC1_X1_SVT
  (Z)
(
  model_source = liberty_cell;
  cell_type = prohibited;
  simulation_function = tie1;

  output (Z) ( )
  (
    primitive = _tie1 (Z);
  )
) // end model LOGIC1_X1_SVT


model MUX2_X1_SVT
  (A, B, S, Z)
(
  model_source = liberty_cell;
  cell_type = mux;
  simulation_function = mux;

  input (A) ( mux_in0; )
  input (B) ( mux_in1; )
  input (S) ( mux_select; )
  output (Z) ( mux_out; )
  (
    primitive = _or (net_0, net_1, Z);
    primitive = _and (S, B, net_0);
    primitive = _and (A, net_2, net_1);
    primitive = _inv (S, net_2);
  )
) // end model MUX2_X1_SVT


model MUX2_X2_SVT
  (A, B, S, Z)
(
  model_source = liberty_cell;
  cell_type = mux;
  simulation_function = mux;

  input (A) ( mux_in0; )
  input (B) ( mux_in1; )
  input (S) ( mux_select; )
  output (Z) ( mux_out; )
  (
    primitive = _or (net_0, net_1, Z);
    primitive = _and (S, B, net_0);
    primitive = _and (A, net_2, net_1);
    primitive = _inv (S, net_2);
  )
) // end model MUX2_X2_SVT


model NAND2_X1_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model NAND2_X1_SVT


model NAND2_X2_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model NAND2_X2_SVT


model NAND2_X4_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A1, A2, net_0);
  )
) // end model NAND2_X4_SVT


model NAND3_X1_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model NAND3_X1_SVT


model NAND3_X2_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model NAND3_X2_SVT


model NAND3_X4_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A3, net_0);
    primitive = _and (A1, A2, net_1);
  )
) // end model NAND3_X4_SVT


model NAND4_X1_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A4, net_0);
    primitive = _and (net_2, A3, net_1);
    primitive = _and (A1, A2, net_2);
  )
) // end model NAND4_X1_SVT


model NAND4_X2_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A4, net_0);
    primitive = _and (net_2, A3, net_1);
    primitive = _and (A1, A2, net_2);
  )
) // end model NAND4_X2_SVT


model NAND4_X4_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nand;
  simulation_function = nand;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, A4, net_0);
    primitive = _and (net_2, A3, net_1);
    primitive = _and (A1, A2, net_2);
  )
) // end model NAND4_X4_SVT


model NOR2_X1_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model NOR2_X1_SVT


model NOR2_X2_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model NOR2_X2_SVT


model NOR2_X4_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model NOR2_X4_SVT


model NOR3_X1_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model NOR3_X1_SVT


model NOR3_X2_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model NOR3_X2_SVT


model NOR3_X4_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model NOR3_X4_SVT


model NOR4_X1_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A4, net_0);
    primitive = _or (net_2, A3, net_1);
    primitive = _or (A1, A2, net_2);
  )
) // end model NOR4_X1_SVT


model NOR4_X2_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A4, net_0);
    primitive = _or (net_2, A3, net_1);
    primitive = _or (A1, A2, net_2);
  )
) // end model NOR4_X2_SVT


model NOR4_X4_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = nor;
  simulation_function = nor;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _or (net_1, A4, net_0);
    primitive = _or (net_2, A3, net_1);
    primitive = _or (A1, A2, net_2);
  )
) // end model NOR4_X4_SVT


model OAI211_X1_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, B, net_0);
    primitive = _and (net_2, A, net_1);
    primitive = _or (C1, C2, net_2);
  )
) // end model OAI211_X1_SVT


model OAI211_X2_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, B, net_0);
    primitive = _and (net_2, A, net_1);
    primitive = _or (C1, C2, net_2);
  )
) // end model OAI211_X2_SVT


model OAI211_X4_SVT
  (A, B, C1, C2,
   ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, B, net_0);
    primitive = _and (net_2, A, net_1);
    primitive = _or (C1, C2, net_2);
  )
) // end model OAI211_X4_SVT


model OAI21_X1_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A, net_1, net_0);
    primitive = _or (B1, B2, net_1);
  )
) // end model OAI21_X1_SVT


model OAI21_X2_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A, net_1, net_0);
    primitive = _or (B1, B2, net_1);
  )
) // end model OAI21_X2_SVT


model OAI21_X4_SVT
  (A, B1, B2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (A, net_1, net_0);
    primitive = _or (B1, B2, net_1);
  )
) // end model OAI21_X4_SVT


model OAI221_X1_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_3, net_0);
    primitive = _and (net_2, A, net_1);
    primitive = _or (C1, C2, net_2);
    primitive = _or (B1, B2, net_3);
  )
) // end model OAI221_X1_SVT


model OAI221_X2_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_3, net_0);
    primitive = _and (net_2, A, net_1);
    primitive = _or (C1, C2, net_2);
    primitive = _or (B1, B2, net_3);
  )
) // end model OAI221_X2_SVT


model OAI221_X4_SVT
  (A, B1, B2, C1,
   C2, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _inv (net_1, net_0);
    primitive = _inv (net_2, net_1);
    primitive = _and (net_3, net_5, net_2);
    primitive = _and (net_4, A, net_3);
    primitive = _or (C1, C2, net_4);
    primitive = _or (B1, B2, net_5);
  )
) // end model OAI221_X4_SVT


model OAI222_X1_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_4, net_0);
    primitive = _and (net_2, net_3, net_1);
    primitive = _or (A1, A2, net_2);
    primitive = _or (B1, B2, net_3);
    primitive = _or (C1, C2, net_4);
  )
) // end model OAI222_X1_SVT


model OAI222_X2_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_4, net_0);
    primitive = _and (net_2, net_3, net_1);
    primitive = _or (A1, A2, net_2);
    primitive = _or (B1, B2, net_3);
    primitive = _or (C1, C2, net_4);
  )
) // end model OAI222_X2_SVT


model OAI222_X4_SVT
  (A1, A2, B1, B2,
   C1, C2, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  input (C1) ( )
  input (C2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _inv (net_1, net_0);
    primitive = _inv (net_2, net_1);
    primitive = _and (net_3, net_6, net_2);
    primitive = _and (net_4, net_5, net_3);
    primitive = _or (A1, A2, net_4);
    primitive = _or (B1, B2, net_5);
    primitive = _or (C1, C2, net_6);
  )
) // end model OAI222_X4_SVT


model OAI22_X1_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_2, net_0);
    primitive = _or (A1, A2, net_1);
    primitive = _or (B1, B2, net_2);
  )
) // end model OAI22_X1_SVT


model OAI22_X2_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_2, net_0);
    primitive = _or (A1, A2, net_1);
    primitive = _or (B1, B2, net_2);
  )
) // end model OAI22_X2_SVT


model OAI22_X4_SVT
  (A1, A2, B1, B2,
   ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (B1) ( )
  input (B2) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_2, net_0);
    primitive = _or (A1, A2, net_1);
    primitive = _or (B1, B2, net_2);
  )
) // end model OAI22_X4_SVT


model OAI33_X1_SVT
  (A1, A2, A3, B1,
   B2, B3, ZN)
(
  model_source = liberty_cell;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (B1) ( )
  input (B2) ( )
  input (B3) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _and (net_1, net_3, net_0);
    primitive = _or (net_2, A3, net_1);
    primitive = _or (A1, A2, net_2);
    primitive = _or (net_4, B3, net_3);
    primitive = _or (B1, B2, net_4);
  )
) // end model OAI33_X1_SVT


model OR2_X1_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _or (A1, A2, ZN);
  )
) // end model OR2_X1_SVT


model OR2_X2_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _or (A1, A2, ZN);
  )
) // end model OR2_X2_SVT


model OR2_X4_SVT
  (A1, A2, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  output (ZN) ( )
  (
    primitive = _or (A1, A2, ZN);
  )
) // end model OR2_X4_SVT


model OR3_X1_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A3, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model OR3_X1_SVT


model OR3_X2_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A3, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model OR3_X2_SVT


model OR3_X4_SVT
  (A1, A2, A3, ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A3, ZN);
    primitive = _or (A1, A2, net_0);
  )
) // end model OR3_X4_SVT


model OR4_X1_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A4, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model OR4_X1_SVT


model OR4_X2_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A4, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model OR4_X2_SVT


model OR4_X4_SVT
  (A1, A2, A3, A4,
   ZN)
(
  model_source = liberty_cell;
  cell_type = or;
  simulation_function = or;

  input (A1) ( )
  input (A2) ( )
  input (A3) ( )
  input (A4) ( )
  output (ZN) ( )
  (
    primitive = _or (net_0, A4, ZN);
    primitive = _or (net_1, A3, net_0);
    primitive = _or (A1, A2, net_1);
  )
) // end model OR4_X4_SVT


model SDFFRS_X1_SVT
  (CK, D, Q, QN,
   RN, SE, SI, SN)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFRS_X1_SVT, DFFRS_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  input (SN) ( active_low_set; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (net_0, net_1, CK, net_2, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _inv (RN, net_1);
    primitive = _or (net_3, net_4, net_2);
    primitive = _and (SE, SI, net_3);
    primitive = _and (D, net_5, net_4);
    primitive = _inv (SE, net_5);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFRS_X1_SVT


model SDFFRS_X2_SVT
  (CK, D, Q, QN,
   RN, SE, SI, SN)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFRS_X2_SVT, DFFRS_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  input (SN) ( active_low_set; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (net_0, net_1, CK, net_2, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _inv (RN, net_1);
    primitive = _or (net_3, net_4, net_2);
    primitive = _and (SE, SI, net_3);
    primitive = _and (D, net_5, net_4);
    primitive = _inv (SE, net_5);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFRS_X2_SVT


model SDFFR_X1_SVT
  (CK, D, Q, QN,
   RN, SE, SI)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFR_X1_SVT, DFFR_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (  , net_0, CK, net_1, IQ, IQN);
    primitive = _inv (RN, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (SE, SI, net_2);
    primitive = _and (D, net_4, net_3);
    primitive = _inv (SE, net_4);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFR_X1_SVT


model SDFFR_X2_SVT
  (CK, D, Q, QN,
   RN, SE, SI)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFR_X2_SVT, DFFR_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (RN) ( active_low_reset; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (  , net_0, CK, net_1, IQ, IQN);
    primitive = _inv (RN, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (SE, SI, net_2);
    primitive = _and (D, net_4, net_3);
    primitive = _inv (SE, net_4);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFR_X2_SVT


model SDFFS_X1_SVT
  (CK, D, Q, QN,
   SE, SI, SN)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFS_X1_SVT, DFFS_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  input (SN) ( active_low_set; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (net_0,  , CK, net_1, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (SE, SI, net_2);
    primitive = _and (D, net_4, net_3);
    primitive = _inv (SE, net_4);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFS_X1_SVT


model SDFFS_X2_SVT
  (CK, D, Q, QN,
   SE, SI, SN)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFFS_X1_SVT, DFFS_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  input (SN) ( active_low_set; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (net_0,  , CK, net_1, IQ, IQN);
    primitive = _inv (SN, net_0);
    primitive = _or (net_2, net_3, net_1);
    primitive = _and (SE, SI, net_2);
    primitive = _and (D, net_4, net_3);
    primitive = _inv (SE, net_4);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFFS_X2_SVT


model SDFF_X1_SVT
  (CK, D, Q, QN,
   SE, SI)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFF_X1_SVT, DFF_X2_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (  ,  , CK, net_0, IQ, IQN);
    primitive = _or (net_1, net_2, net_0);
    primitive = _and (SE, SI, net_1);
    primitive = _and (D, net_3, net_2);
    primitive = _inv (SE, net_3);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFF_X1_SVT


model SDFF_X2_SVT
  (CK, D, Q, QN,
   SE, SI)
(
  model_source = liberty_cell;
  cell_type = scan_cell;
  simulation_function = scan_cell;
  nonscan_equivalents = DFF_X2_SVT, DFF_X1_SVT;

  input (CK) ( posedge_clock; )
  input (D) ( data_in; )
  input (SE) ( scan_enable; )
  input (SI) ( scan_in; )
  output (Q) ( scan_out; )
  output (QN) ( scan_out_inv; )
  (
    primitive = _dff (  ,  , CK, net_0, IQ, IQN);
    primitive = _or (net_1, net_2, net_0);
    primitive = _and (SE, SI, net_1);
    primitive = _and (D, net_3, net_2);
    primitive = _inv (SE, net_3);
    primitive = _buf (IQ, Q);
    primitive = _buf (IQN, QN);
  )
) // end model SDFF_X2_SVT


model TBUF_X16_SVT
  (A, EN, Z)
(
  model_source = liberty_cell;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _tsl (A, EN, Z);
  )
) // end model TBUF_X16_SVT


model TBUF_X1_SVT
  (A, EN, Z)
(
  model_source = liberty_cell;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _tsl (A, EN, Z);
  )
) // end model TBUF_X1_SVT


model TBUF_X2_SVT
  (A, EN, Z)
(
  model_source = liberty_cell;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _tsl (A, EN, Z);
  )
) // end model TBUF_X2_SVT


model TBUF_X4_SVT
  (A, EN, Z)
(
  model_source = liberty_cell;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _tsl (A, EN, Z);
  )
) // end model TBUF_X4_SVT


model TBUF_X8_SVT
  (A, EN, Z)
(
  model_source = liberty_cell;

  input (A) ( )
  input (EN) ( )
  output (Z) ( )
  (
    primitive = _tsl (A, EN, Z);
  )
) // end model TBUF_X8_SVT


model TINV_X1_SVT
  (EN, I, ZN)
(
  model_source = liberty_cell;

  input (EN) ( )
  input (I) ( )
  output (ZN) ( )
  (
    primitive = _tsl (net_0, EN, ZN);
    primitive = _inv (I, net_0);
  )
) // end model TINV_X1_SVT


model TLAT_X1_SVT
  (D, G, OE, Q)
(
  model_source = liberty_cell;

  input (D) ( )
  input (G) ( active_high_clock; )
  input (OE) ( )
  output (Q) ( )
  (
    primitive = _dlat (  ,  , G, D, IQ,  );
    primitive = _tsl (IQ, net_0, Q);
    primitive = _inv (OE, net_0);
  )
) // end model TLAT_X1_SVT


model XNOR2_X1_SVT
  (A, B, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _xor (A, B, net_0);
  )
) // end model XNOR2_X1_SVT


model XNOR2_X2_SVT
  (A, B, ZN)
(
  model_source = liberty_cell;

  input (A) ( )
  input (B) ( )
  output (ZN) ( )
  (
    primitive = _inv (net_0, ZN);
    primitive = _xor (A, B, net_0);
  )
) // end model XNOR2_X2_SVT


model XOR2_X1_SVT
  (A, B, Z)
(
  model_source = liberty_cell;
  cell_type = xor;
  simulation_function = xor;

  input (A) ( )
  input (B) ( )
  output (Z) ( )
  (
    primitive = _xor (A, B, Z);
  )
) // end model XOR2_X1_SVT


model XOR2_X2_SVT
  (A, B, Z)
(
  model_source = liberty_cell;
  cell_type = xor;
  simulation_function = xor;

  input (A) ( )
  input (B) ( )
  output (Z) ( )
  (
    primitive = _xor (A, B, Z);
  )
) // end model XOR2_X2_SVT
